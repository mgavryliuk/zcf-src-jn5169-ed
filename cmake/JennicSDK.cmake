# set(CMAKE_MODULE_PATH ${JENNIC_CMAKE_DIR} ${CMAKE_MODULE_PATH})

# toolchain
if(NOT SDK_PREFIX)
    message(FATAL_ERROR "No SDK_PREFIX specified (it must point to the root of JN-SW-4170 SDK)")
endif()

if(NOT TOOLCHAIN_PREFIX)
    message(FATAL_ERROR "No TOOLCHAIN_PREFIX specified (it must point to the root of desired compiler bundle)")
endif()

set(SDK_COMPONENTS_BASE_DIR ${SDK_PREFIX}/Components)

get_filename_component(JENNIC_CMAKE_DIR ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)
set(CMAKE_MODULE_PATH ${JENNIC_CMAKE_DIR} ${CMAKE_MODULE_PATH})
set(CMAKE_TOOLCHAIN_FILE ${JENNIC_CMAKE_DIR}/${JENNIC_CHIP}.cmake)

add_definitions(
    -DJN516x=5160
    -DJN5169=5169
    -DJENNIC_CHIP_NAME=_${JENNIC_CHIP}
    -DJENNIC_CHIP_FAMILY_NAME=_${JENNIC_CHIP_FAMILY}
    -DJENNIC_CHIP=${JENNIC_CHIP}
    -DJENNIC_CHIP_${JENNIC_CHIP}
    -DJENNIC_CHIP_FAMILY=${JENNIC_CHIP_FAMILY}
    -DJENNIC_CHIP_FAMILY_${JENNIC_CHIP_FAMILY}

    -DDBG_ENABLE
    -DEMBEDDED
    -DPDM_NO_RTOS
    -DJENNIC_MAC_MiniMacShim
    -DJENNIC_STACK_ZBPro
)

function(dump_compiler_settings)
    message(STATUS "")
    message(STATUS "======================")
    message(STATUS "Toolchain paths:")
    message(STATUS "  TOOLCHAIN_BIN_DIR = ${TOOLCHAIN_BIN_DIR}")
    message(STATUS "  TOOLCHAIN_INC_DIR = ${TOOLCHAIN_INC_DIR}")
    message(STATUS "  TOOLCHAIN_LIB_DIR = ${TOOLCHAIN_LIB_DIR}")
    message(STATUS "")
    message(STATUS "  CMAKE_C_COMPILER = ${CMAKE_C_COMPILER}")
    message(STATUS "  CMAKE_CXX_COMPILER = ${CMAKE_CXX_COMPILER}")
    message(STATUS "  CMAKE_OBJCOPY = ${CMAKE_OBJCOPY}")
    message(STATUS "  CMAKE_OBJDUMP = ${CMAKE_OBJDUMP}")
    message(STATUS "  CMAKE_SIZE = ${CMAKE_SIZE}")
    message(STATUS "  CMAKE_DEBUGER = ${CMAKE_DEBUGER}")
    message(STATUS "  CMAKE_CPPFILT = ${CMAKE_CPPFILT}")
    message(STATUS "======================")
    message(STATUS "Params:")
    message(STATUS "  SDK_COMPONENTS_BASE_DIR = ${SDK_COMPONENTS_BASE_DIR}")
    message(STATUS "")
    message(STATUS "======================")
    message(STATUS "Compiler flags:")
    message(STATUS "  CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
    message(STATUS "  CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
    message(STATUS "  CMAKE_ASM_FLAGS = ${CMAKE_ASM_FLAGS}")
    message(STATUS "  CMAKE_EXE_LINKER_FLAGS = ${CMAKE_EXE_LINKER_FLAGS}")
    message(STATUS "  CMAKE_MODULE_LINKER_FLAGS = ${CMAKE_MODULE_LINKER_FLAGS}")
    message(STATUS "  CMAKE_SHARED_LINKER_FLAGS = ${CMAKE_SHARED_LINKER_FLAGS}")
    message(STATUS "")
    message(STATUS "  CMAKE_C_FLAGS_DEBUG = ${CMAKE_C_FLAGS_DEBUG}")
    message(STATUS "  CMAKE_CXX_FLAGS_DEBUG = ${CMAKE_CXX_FLAGS_DEBUG}")
    message(STATUS "  CMAKE_ASM_FLAGS_DEBUG = ${CMAKE_ASM_FLAGS_DEBUG}")
    message(STATUS "  CMAKE_EXE_LINKER_FLAGS_DEBUG = ${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
    message(STATUS "  CMAKE_C_FLAGS_RELEASE = ${CMAKE_C_FLAGS_RELEASE}")
    message(STATUS "  CMAKE_CXX_FLAGS_RELEASE = ${CMAKE_CXX_FLAGS_RELEASE}")
    message(STATUS "  CMAKE_ASM_FLAGS_RELEASE = ${CMAKE_ASM_FLAGS_RELEASE}")
    message(STATUS "  CMAKE_EXE_LINKER_FLAGS_RELEASE = ${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
    message(STATUS "")
endfunction()
